{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\janos\\\\Desktop\\\\Udemy\\\\react\\\\sending-http-requests-firebase\\\\src\\\\App.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport MoviesList from './components/MoviesList';\nimport AddMovie from './components/AddMovie';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch('https://react-http-1749b-default-rtdb.europe-west1.firebasedatabase.app/movies.json');\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = await response.json();\n\n      for (const key in data) {\n        return {\n          id: data.key,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      }\n\n      const transformedMovies = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]); //we could also add error handling with try and catch\n\n  async function addMovieHandler(movie) {\n    const response = await fetch('https://react-http-1749b-default-rtdb.europe-west1.firebasedatabase.app/movies.json', {\n      method: 'POST',\n      //by default is GET\n      body: JSON.stringify(movie),\n      //it takes JS object or array and turns it into JSON format\n      headers: {\n        'Content-Type': 'application/json' //not required for Firebase but a lot of APIs require it\n\n      }\n    });\n    const data = await response.json(); // we can see the response in the console (auto-generated ID by Firebase)\n\n    console.log(data);\n  }\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }\n  }, \"Found no movies.\");\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 15\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddMovie, {\n    onAddMovie: addMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","MoviesList","AddMovie","App","movies","setMovies","isLoading","setIsLoading","error","setError","fetchMoviesHandler","response","fetch","ok","Error","data","json","key","id","title","movieData","openingText","opening_crawl","releaseDate","release_date","transformedMovies","results","map","episode_id","message","addMovieHandler","movie","method","body","JSON","stringify","headers","console","log","content","length"],"sources":["C:/Users/janos/Desktop/Udemy/react/sending-http-requests-firebase/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport AddMovie from './components/AddMovie';\nimport './App.css';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('https://react-http-1749b-default-rtdb.europe-west1.firebasedatabase.app/movies.json');\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = await response.json();\n\n      for(const key in data) {\n        return {\n          id: data.key,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date,\n        }\n      }\n\n      const transformedMovies = data.results.map((movieData) => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          openingText: movieData.opening_crawl,\n          releaseDate: movieData.release_date,\n        };\n      });\n      setMovies(transformedMovies);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler]);\n\n  //we could also add error handling with try and catch\n  async function addMovieHandler(movie) {\n    const response= await fetch('https://react-http-1749b-default-rtdb.europe-west1.firebasedatabase.app/movies.json', {\n      method: 'POST', //by default is GET\n      body: JSON.stringify(movie), //it takes JS object or array and turns it into JSON format\n      headers: {\n        'Content-Type': 'application/json', //not required for Firebase but a lot of APIs require it\n      }\n    });\n    const data = await response.json(); // we can see the response in the console (auto-generated ID by Firebase)\n    console.log(data)\n  }\n\n  let content = <p>Found no movies.</p>;\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}